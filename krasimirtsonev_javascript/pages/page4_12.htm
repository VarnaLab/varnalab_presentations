<div class="page">
	<h1>4.12. Mixin Pattern</h1>
	- наследяване на функционалност от mixin обект/клас<br />
	- вид наследяване
	<pre>
		/* Car Class */
		var Car = function(settings){
			this.model = settings.model || 'no model provided';
			this.colour = settings.colour || 'no colour provided';
		};

		/* Mixin Class */
		var Mixin = function(){};
		Mixin.prototype = {
			driveForward: function(){
				console.log('drive forward');
			},
			driveBackward: function(){
				console.log('drive backward');
			}
		};


		/* Augment existing class with a method from another class */
		function augment(receivingClass, givingClass) {
			/* only provide certain methods */
			if (arguments[2]) {
				for (var i=0, len=arguments.length; i&lt;len; i++) {
					receivingClass.prototype[arguments[i]] = givingClass.prototype[arguments[i]];
				}
			}
			/* provide all methods*/
			else {
				for (var methodName in givingClass.prototype) {
					/* check to make sure the receiving class doesn't 
					   have a method of the same name as the one currently 
					   being processed */
					if (!receivingClass.prototype[methodName]) {
						receivingClass.prototype[methodName] = givingClass.prototype[methodName];
					}
				}
			}
		}


		/* Augment the Car class to have the methods 'driveForward' and 'driveBackward'*/
		augment(Car, Mixin,'driveForward','driveBackward');

		/* Create a new Car */
		var vehicle = new Car({model:'Ford Escort', colour:'blue'});

		/* Test to make sure we now have access to the methods*/
		vehicle.driveForward();
		vehicle.driveBackward();

	</pre>
</div>